diff --git a/code/model.py b/code/model.py
index d484b4c..8eab665 100755
--- a/code/model.py
+++ b/code/model.py
@@ -479,11 +479,7 @@ class LightGCN_PyG(nn.Module):
         super(LightGCN_PyG, self).__init__()
         self.config = config
         self.dataset = dataset
-        self.precal = precal        
-        # dim = config['latent_dim_rec']
-        # self.conv1 = GCNConv(dim, dim)
-        # self.conv2 = GCNConv(dim, dim)
-        # self.conv3 = GCNConv(dim, dim)
+        self.precal = precal 
         self.lightConv = LGConv()
 
         self.__init_weight()
@@ -536,7 +532,7 @@ class LightGCN_PyG(nn.Module):
         items_emb0 = self.embedding_item.weight
         self.x = torch.cat([users_emb0, items_emb0])
         self.edge_index = torch.tensor([list(np.append(self.dataset.trainUser, self.dataset.trainItem)), list(np.append(self.dataset.trainItem, self.dataset.trainUser))])
-        self.data_origin = torch_geometric.data.Data(x=self.x, edge_index=self.edge_index.contiguous()).to(world.device)
+        self.data_origin = torch_geometric.data.Data(x=self.x, edge_index=self.edge_index.contiguous())
         
 
         print(f"GCL Model is ready to go!")
@@ -544,9 +540,11 @@ class LightGCN_PyG(nn.Module):
     def computer(self):
         """
         vanilla LightGCN. No dropout used, return final embedding for rec. 
-        """       
-        x, edge_index= self.data_origin.x, self.data_origin.edge_index
-        x, edge_index = x.to(world.device), edge_index.to(world.device)
+        """
+        users_emb0 = self.embedding_user.weight
+        items_emb0 = self.embedding_item.weight
+        x = torch.cat([users_emb0, items_emb0])
+        x, edge_index = x.to(world.device), self.edge_index.to(world.device)
         embs = [x]
         for layer in range(self.n_layers):
             x = self.lightConv(x=x, edge_index=edge_index)
diff --git a/code/tune2.py b/code/tune2.py
index 68479a1..f91fcb4 100644
--- a/code/tune2.py
+++ b/code/tune2.py
@@ -1,18 +1,28 @@
 import os
-cuda = 1
+cuda = 0
 # Baseline--yelp2018--2 LightGCN_PyG + BPR
-os.system(f'python main.py --project GCLRec_No_Valid --name LightGCN_PyG+BPR --model LightGCN_PyG --loss BPR --dataset yelp2018\
-            --init_method Normal --lr 0.001 --weight_decay 1e-4 --cuda {cuda} --num_layers 3 --latent_dim_rec 64 --batch_size 2048\
-            --comment _ --if_valid 0 --notes PyG_Implementation --tag LightGCN --group baseline --job_type yelp2018')
+# os.system(f'python main.py --project GCLRec_No_Valid --name LightGCN_PyG+BPR --model LightGCN_PyG --loss BPR --augment No --dataset yelp2018\
+#             --init_method Normal --lr 0.001 --weight_decay 1e-4 --cuda {cuda} --num_layers 3 --latent_dim_rec 64 --batch_size 2048\
+#             --comment _ --if_valid 0 --notes PyG_Implementation --tag LightGCN --group baseline --job_type yelp2018')
 
-#Baseline--yelp2018--4 SGL_RW+BPR_Contrast
-os.system(f'python main.py --project GCLRec_No_Valid --name SGL_RW+BPR_CL --model SGL --loss BPR_Contrast --augment RW --dataset yelp2018\
-            --init_method Normal --lr 0.001 --weight_decay 1e-4 --cuda {cuda} --num_layers 3 --latent_dim_rec 64 --batch_size 2048 \
-            --lambda1 0.1 --p_drop 0.1 --temp_tau 0.2 \
-            --comment _ --if_valid 0 --notes _ --tag SGL --group baseline --job_type yelp2018')
+# #Baseline--yelp2018--4 SGL_RW+BPR_Contrast
+# os.system(f'python main.py --project GCLRec_No_Valid --name SGL_RW+BPR_CL --model SGL --loss BPR_Contrast --augment RW --dataset yelp2018\
+#             --init_method Normal --lr 0.001 --weight_decay 1e-4 --cuda {cuda} --num_layers 3 --latent_dim_rec 64 --batch_size 2048 \
+#             --lambda1 0.1 --p_drop 0.1 --temp_tau 0.2 \
+#             --comment _ --if_valid 0 --notes _ --tag SGL --group baseline --job_type yelp2018')
 
 #Baseline--yelp2018--6 SimGCL+BPR_Contrast
-os.system(f'python main.py --project GCLRec_No_Valid --name SimGCL+BPR_CL --model SimGCL --loss BPR_Contrast --augment No --dataset yelp2018\
-            --init_method Normal --lr 0.001 --weight_decay 1e-4 --cuda {cuda} --num_layers 3 --latent_dim_rec 64 --batch_size 2048 \
-            --lambda1 0.1 --temp_tau 0.2 --eps_SimGCL 0.1\
-            --comment _ --if_valid 0 --notes _ --tag SimGCL --group baseline --job_type yelp2018')#Layer=3
\ No newline at end of file
+# os.system(f'python main.py --project GCLRec_No_Valid --name SimGCL+BPR_CL --model SimGCL --loss BPR_Contrast --augment No --dataset yelp2018\
+#             --init_method Normal --lr 0.001 --weight_decay 1e-4 --cuda {cuda} --num_layers 3 --latent_dim_rec 64 --batch_size 2048 \
+#             --lambda1 0.1 --temp_tau 0.2 --eps_SimGCL 0.1\
+#             --comment _ --if_valid 0 --notes _ --tag SimGCL --group baseline --job_type yelp2018')#Layer=3
+
+#Aument_Learner and LightGCN_PyG
+os.system(f'python main.py --model LightGCN_PyG --loss BPR_Contrast --augment Learner --dataset yelp2018\
+            --init_method Normal --adaptive_method None\
+            --temp_tau 0.2\
+            --if_visual 0 --cuda {cuda} --comment tune_Aument_Learner_LGN_Contrast\
+            --num_layers 3 --latent_dim_rec 64 --batch_size 2048\
+            --early_stop_steps 40\
+            --if_projector 0\
+            --if_valid 0')
\ No newline at end of file
