==========config==========
{'GTN_K': 3,
 'GTN_alpha': 0.3,
 'adaptive_method': 'mlp',
 'alpha': 0.5,
 'augment': 'No',
 'batch_size': 2048,
 'centroid_mode': 'eigenvector',
 'comment': '_',
 'commonNeighbor_mode': 'SC',
 'cores': 10,
 'dataset': 'yelp2018',
 'device': device(type='cuda'),
 'early_stop_steps': 30,
 'edge_drop_prob': 0.1,
 'epoch_only_pop_for_BCloss': 5,
 'epochs': 1000,
 'eps_SimGCL': 0.1,
 'epsilon_GCLRec': 0.1,
 'group': 'Ours',
 'if_SVD': 1,
 'if_big_matrix': 0,
 'if_double_label': 1,
 'if_load_embedding': 0,
 'if_multicore': 1,
 'if_pretrain': 0,
 'if_projector': 0,
 'if_tensorboard': 1,
 'if_tsne': 1,
 'if_valid': 1,
 'if_visual': 0,
 'init_method': 'Normal',
 'item_emb': 0,
 'job_type': 'yelp2018',
 'k_aug': 0,
 'lambda1': 0.1,
 'lambda_ForkMerge': 0.5,
 'latent_dim_rec': 64,
 'loss': 'Adaptive',
 'lr': 0.001,
 'model': 'SimGCL',
 'n_cluster': 10,
 'n_fold': 2,
 'name': 'SimGCL+All_Weighted_Loss',
 'notes': 'SimGCL+All_Weighted_InfoNCE_+_AdaLoss_mlp',
 'num_layers': 3,
 'p_drop': 0.1,
 'perplexity': 50,
 'pop_gamma': 0.02,
 'pop_group': 10,
 'project': 'GCLRec_Valid',
 'seed': 2023,
 'sigma_gausse': 1.0,
 'svd_q': 5,
 'tag': ['Adaptive_loss'],
 'tau_plus': 0.1,
 'temp_tau': 0.12,
 'temp_tau_pop': 0.1,
 'test_u_batch_size': 2048,
 'topks': [20, 40],
 'tsne_group': [0, 9],
 'tsne_points': 2000,
 'user_emb': 0,
 'visual_epoch': 3,
 'w_GCLRec': 0.1,
 'weight_decay': 0.0001}
==========config==========
[DATALOADER--START]
loading [/home/cgm/code/CGM__GCLRec/data/yelp2018]
1093508 interactions for training
324147 interactions for testing
yelp2018 Sparsity : 0.0011765708510383113
loading adjacency matrix
successfully loaded...
Remember to delete this pre-calculed mat while changing data split !
Traceback (most recent call last):
  File "/home/cgm/code/CGM__GCLRec/code/main.py", line 201, in <module>
    main()
  File "/home/cgm/code/CGM__GCLRec/code/main.py", line 56, in main
    dataset = dataloader.dataset(world.config, datasetpath)
  File "/home/cgm/code/CGM__GCLRec/code/dataloader.py", line 154, in __init__
    self.getSparseGraph()
  File "/home/cgm/code/CGM__GCLRec/code/dataloader.py", line 271, in getSparseGraph
    self.nx_Graph = nx.from_scipy_sparse_matrix(norm_adj)#TODO 在dataset中用额外的nx_Graph存储networkx格式有点浪费内存！
  File "/home/cgm/anaconda3/lib/python3.9/site-packages/networkx/convert_matrix.py", line 1103, in from_scipy_sparse_matrix
    return from_scipy_sparse_array(
  File "/home/cgm/anaconda3/lib/python3.9/site-packages/networkx/convert_matrix.py", line 1271, in from_scipy_sparse_array
    G.add_weighted_edges_from(triples, weight=edge_attribute)
  File "/home/cgm/anaconda3/lib/python3.9/site-packages/networkx/classes/graph.py", line 987, in add_weighted_edges_from
    self.add_edges_from(((u, v, {weight: d}) for u, v, d in ebunch_to_add), **attr)
  File "/home/cgm/anaconda3/lib/python3.9/site-packages/networkx/classes/graph.py", line 951, in add_edges_from
    datadict = self._adj[u].get(v, self.edge_attr_dict_factory())
KeyboardInterrupt